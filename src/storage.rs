// This file is part of Gear.

// Copyright (C) 2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Awesome storage primitives module.

use core::{
    cell::{Ref, RefCell, RefMut},
    convert::Infallible,
    ops::{Deref, DerefMut},
};

use sails_rs::rc::Rc;

/// A trait representing a read-only storage mechanism inside a program.
pub trait Storage {
    /// The type of item stored in the storage.
    type Item: ?Sized;

    /// The type of error that can occur when accessing the storage.
    type Error: core::error::Error;

    /// Retrieves a reference to the item stored in the storage.
    fn get(&self) -> Result<impl Deref<Target = Self::Item>, Self::Error>;
}

/// A trait representing a mutable storage mechanism inside a program.
pub trait StorageMut: Storage {
    /// Retrieves a mutable reference to the item stored in the storage.
    fn get_mut(&mut self) -> Result<impl DerefMut<Target = Self::Item>, Self::Error>;

    /// Replaces the item in the storage with a new value and returns the old value.
    fn replace(&mut self, value: Self::Item) -> Result<Self::Item, Self::Error>
    where
        Self::Item: Sized;

    /// Replaces the item in the storage with a new value generated by a function and returns the old value.
    fn replace_with(
        &mut self,
        f: impl FnOnce(&mut Self::Item) -> Self::Item,
    ) -> Result<Self::Item, Self::Error>
    where
        Self::Item: Sized,
    {
        let replacement = {
            let mut item = self.get_mut()?;
            f(&mut item)
        };
        self.replace(replacement)
    }

    /// Takes the item from the storage and returns it, replacing it with a default value.
    fn take(&mut self) -> Result<Self::Item, Self::Error>
    where
        Self::Item: Default + Sized,
    {
        self.replace(Default::default())
    }
}

/// A trait representing a read-only storage mechanism that cannot fail on access.
pub trait InfallibleStorage {
    /// The type of item stored in the storage.
    type Item;

    /// Retrieves a reference to the item stored in the storage.
    fn get(&self) -> impl Deref<Target = Self::Item>;
}

/// A trait representing a mutable storage mechanism that cannot fail on access.
pub trait InfallibleStorageMut: InfallibleStorage {
    /// Retrieves a mutable reference to the item stored in the storage.
    fn get_mut(&mut self) -> impl DerefMut<Target = Self::Item>;

    /// Replaces the item in the storage with a new value and returns the old value.
    fn replace(&mut self, value: Self::Item) -> Self::Item;

    /// Replaces the item in the storage with a new value generated by a function and returns the old value.
    fn replace_with(&mut self, f: impl FnOnce(&mut Self::Item) -> Self::Item) -> Self::Item
    where
        Self::Item: Sized,
    {
        let replacement = {
            let mut item = self.get_mut();
            f(&mut item)
        };
        self.replace(replacement)
    }

    /// Takes the item from the storage and returns it, replacing it with a default value.
    fn take(&mut self) -> Self::Item
    where
        Self::Item: Default + Sized,
    {
        self.replace(Default::default())
    }
}

// Storage trait implementations for InfallibleStorage
impl<S: InfallibleStorage> Storage for S {
    type Item = S::Item;
    type Error = Infallible;

    fn get(&self) -> Result<impl Deref<Target = Self::Item>, Self::Error> {
        Ok(S::get(self))
    }
}

impl<S: InfallibleStorageMut> StorageMut for S {
    fn get_mut(&mut self) -> Result<impl DerefMut<Target = Self::Item>, Self::Error> {
        Ok(S::get_mut(self))
    }

    fn replace(&mut self, value: Self::Item) -> Result<Self::Item, Self::Error>
    where
        S::Item: Sized,
    {
        Ok(S::replace(self, value))
    }
}

// Storage trait implementations for &mut T
//
// Do not implement `InfallibleStorage` trait for `&T` to avoid conflicting with &RefCell<T> implementation.
impl<T> InfallibleStorage for &mut T {
    type Item = T;

    fn get(&self) -> impl Deref<Target = Self::Item> {
        self.deref()
    }
}

impl<T> InfallibleStorageMut for &mut T {
    fn get_mut(&mut self) -> impl DerefMut<Target = Self::Item> {
        self.deref_mut()
    }

    fn replace(&mut self, value: Self::Item) -> Self::Item {
        core::mem::replace(self, value)
    }
}

// Storage trait implementations for Rc<RefCell<T>>
pub type StorageCell<T> = Rc<RefCell<T>>;

impl<T> InfallibleStorage for Rc<RefCell<T>> {
    type Item = T;

    fn get(&self) -> impl Deref<Target = Self::Item> {
        self.borrow()
    }
}

impl<T> InfallibleStorageMut for Rc<RefCell<T>> {
    fn get_mut(&mut self) -> impl DerefMut<Target = Self::Item> {
        self.borrow_mut()
    }

    fn replace(&mut self, value: Self::Item) -> Self::Item {
        RefCell::replace(self, value)
    }

    fn replace_with(&mut self, f: impl FnOnce(&mut Self::Item) -> Self::Item) -> Self::Item {
        RefCell::replace_with(self, f)
    }
}

// Storage trait implementations for &RefCell<T>
impl<T> InfallibleStorage for &RefCell<T> {
    type Item = T;

    fn get(&self) -> impl Deref<Target = Self::Item> {
        self.borrow()
    }
}

impl<T> InfallibleStorageMut for &RefCell<T> {
    fn get_mut(&mut self) -> impl DerefMut<Target = Self::Item> {
        self.borrow_mut()
    }

    fn replace(&mut self, value: Self::Item) -> Self::Item {
        RefCell::replace(self, value)
    }

    fn replace_with(&mut self, f: impl FnOnce(&mut Self::Item) -> Self::Item) -> Self::Item {
        RefCell::replace_with(self, f)
    }
}

// Storage trait implementations for Ref<T>, RefMut<T>
impl<'a, T> InfallibleStorage for Ref<'a, T> {
    type Item = T;

    fn get(&self) -> impl Deref<Target = Self::Item> {
        self.deref()
    }
}

impl<'a, T> InfallibleStorage for RefMut<'a, T> {
    type Item = T;

    fn get(&self) -> impl Deref<Target = Self::Item> {
        self.deref()
    }
}

impl<'a, T> InfallibleStorageMut for RefMut<'a, T> {
    fn get_mut(&mut self) -> impl DerefMut<Target = Self::Item> {
        self.deref_mut()
    }

    fn replace(&mut self, value: Self::Item) -> Self::Item {
        core::mem::replace(self, value)
    }
}
