// This file is part of Gear.

// Copyright (C) 2025 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Awesome storage primitives module.

use core::{
    cell::{Ref, RefCell, RefMut},
    convert::Infallible,
    error,
    ops::Deref,
};
use sails_rs::rc::Rc;

use crate::unwrap_infallible;

/// A trait representing a storage mechanism inside a program.
pub trait Storage {
    /// The type of item stored in the storage.
    type Item;

    /// The type of error that can occur when accessing the storage.
    type Error: error::Error;

    /// Retrieves a reference to the item stored in the storage.
    fn get(&self) -> Result<Ref<'_, Self::Item>, Self::Error>;

    /// Retrieves a mutable reference to the item stored in the storage.
    fn get_mut(&self) -> Result<RefMut<'_, Self::Item>, Self::Error>;

    /// Replaces the item in the storage with a new value and returns the old value.
    fn replace(&self, value: Self::Item) -> Result<Self::Item, Self::Error>;

    /// Replaces the item in the storage with a new value generated by a function and returns the old value.
    fn replace_with(
        &self,
        f: impl FnOnce(&mut Self::Item) -> Self::Item,
    ) -> Result<Self::Item, Self::Error>;
}

impl<T> Storage for RefCell<T> {
    type Item = T;
    type Error = Infallible;

    fn get(&self) -> Result<Ref<'_, Self::Item>, Self::Error> {
        Ok(self.borrow())
    }

    fn get_mut(&self) -> Result<RefMut<'_, Self::Item>, Self::Error> {
        Ok(self.borrow_mut())
    }

    fn replace(&self, value: Self::Item) -> Result<Self::Item, Self::Error> {
        Ok(self.replace(value))
    }

    fn replace_with(
        &self,
        f: impl FnOnce(&mut Self::Item) -> Self::Item,
    ) -> Result<Self::Item, Self::Error> {
        Ok(self.replace_with(f))
    }
}

impl<S: Storage> Storage for Rc<S> {
    type Item = S::Item;
    type Error = S::Error;

    fn get(&self) -> Result<Ref<'_, Self::Item>, Self::Error> {
        self.deref().get()
    }

    fn get_mut(&self) -> Result<RefMut<'_, Self::Item>, Self::Error> {
        self.deref().get_mut()
    }

    fn replace(&self, value: Self::Item) -> Result<Self::Item, Self::Error> {
        self.deref().replace(value)
    }

    fn replace_with(
        &self,
        f: impl FnOnce(&mut Self::Item) -> Self::Item,
    ) -> Result<Self::Item, Self::Error> {
        self.deref().replace_with(f)
    }
}

/// A trait representing a storage mechanism that cannot fail on access.
///
/// Auto derived for any `Storage` impl with `Infallible` error type.
pub trait InfallibleStorage {
    /// The type of item stored in the storage.
    type Item;

    /// Retrieves a reference to the item stored in the storage.
    fn get(&self) -> Ref<'_, Self::Item>;

    /// Retrieves a mutable reference to the item stored in the storage.
    fn get_mut(&self) -> RefMut<'_, Self::Item>;

    /// Replaces the item in the storage with a new value and returns the old value.
    fn replace(&self, value: Self::Item) -> Self::Item;

    /// Replaces the item in the storage with a new value generated by a function and returns the old value.
    fn replace_with(&self, f: impl FnOnce(&mut Self::Item) -> Self::Item) -> Self::Item;
}

impl<S: Storage<Error = Infallible>> InfallibleStorage for S {
    type Item = S::Item;

    fn get(&self) -> Ref<'_, Self::Item> {
        unwrap_infallible!(S::get(self))
    }

    fn get_mut(&self) -> RefMut<'_, Self::Item> {
        unwrap_infallible!(S::get_mut(self))
    }

    fn replace(&self, value: Self::Item) -> Self::Item {
        unwrap_infallible!(S::replace(self, value))
    }

    fn replace_with(&self, f: impl FnOnce(&mut Self::Item) -> Self::Item) -> Self::Item {
        unwrap_infallible!(S::replace_with(self, f))
    }
}
